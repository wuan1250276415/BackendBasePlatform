spring:
  data:
    redis:
      host: localhost
      port: 6379
      password: password
      connect-timeout: 10000
      database: 0
  main:
    web-application-type: reactive
  application:
    name: backendbaseplatform
  datasource:
    url: jdbc:postgresql://localhost:5432/backend
    password: wuanfuck321.
    driver-class-name: org.postgresql.Driver
    username: wuan
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
#        format_sql: true
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  cloud:
    compatibility-verifier:
      enabled: false
    loadbalancer:
      ribbon:
        enabled: false
    consul:
      host: localhost
      port: 8700
      discovery:
        instanceId: ${spring.application.name}:${spring.application.instance_id:${random.uuid}}
        prefer-ip-address: true
        service-name: ${spring.application.name}
        tags: backendbaseplatform
        register: true
        deregister: true
        enabled: true
        fail-fast: true
      config:
        import-check:
          enabled: false
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    websocket:
      destination-prefix: /app
      broker-prefix: topic
management:
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: '*'
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans

server:
  port: 8080

resilience4j.circuitbreaker:
    configs:
        default:
            registerHealthIndicator: true
            slidingWindowSize: 10
            minimumNumberOfCalls: 5
            permittedNumberOfCallsInHalfOpenState: 3
            automaticTransitionFromOpenToHalfOpenEnabled: true
            waitDurationInOpenState: 5s
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
            recordExceptions:
                - org.springframework.web.client.HttpServerErrorException
                - java.util.concurrent.TimeoutException
                - java.io.IOException
            ignoreExceptions:
                - pro.wuan.core.exception.BusinessException
        shared:
            slidingWindowSize: 100
            permittedNumberOfCallsInHalfOpenState: 30
            waitDurationInOpenState: 1s
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
            ignoreExceptions:
                - pro.wuan.core.exception.BusinessException
    instances:
        backendA:
            baseConfig: default
        backendB:
            registerHealthIndicator: true
            slidingWindowSize: 10
            minimumNumberOfCalls: 10
            permittedNumberOfCallsInHalfOpenState: 3
            waitDurationInOpenState: 5s
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
            recordFailurePredicate: pro.wuan.core.exception.RecordFailurePredicate
        slowApi:
          slidingWindowSize: 10
          failureRateThreshold: 50
          waitDurationInOpenState: 10000
          slowCallRateThreshold: 100
          slowCallDurationThreshold: 2000
          permittedNumberOfCallsInHalfOpenState: 3
          minimumNumberOfCalls: 5
resilience4j.retry:
    configs:
        default:
            maxAttempts: 3
            waitDuration: 100
            retryExceptions:
                - org.springframework.web.client.HttpServerErrorException
                - java.util.concurrent.TimeoutException
                - java.io.IOException
            ignoreExceptions:
                - pro.wuan.core.exception.BusinessException
    instances:
        backendA:
            baseConfig: default
        backendB:
            baseConfig: default
resilience4j.bulkhead:
    configs:
        default:
            maxConcurrentCalls: 100
    instances:
        backendA:
            maxConcurrentCalls: 10
        backendB:
            maxWaitDuration: 10ms
            maxConcurrentCalls: 20

resilience4j.thread-pool-bulkhead:
    configs:
        default:
            maxThreadPoolSize: 4
            coreThreadPoolSize: 2
            queueCapacity: 2
    instances:
        backendA:
            baseConfig: default
        backendB:
            maxThreadPoolSize: 1
            coreThreadPoolSize: 1
            queueCapacity: 1

resilience4j.ratelimiter:
    configs:
        default:
            registerHealthIndicator: false
            limitForPeriod: 10
            limitRefreshPeriod: 1s
            timeoutDuration: 0
            eventConsumerBufferSize: 100
    instances:
        backendA:
            baseConfig: default
        backendB:
            limitForPeriod: 6
            limitRefreshPeriod: 500ms
            timeoutDuration: 3s

resilience4j.timelimiter:
    configs:
        default:
            cancelRunningFuture: false
            timeoutDuration: 2s
    instances:
        backendA:
            baseConfig: default
        backendB:
            baseConfig: default
logging:
  pattern:
#    console: '%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n'
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
  level:
    web: debug

application:
  security:
    jwt:
      secret-key: 4A404E635266556A586E5A7234753778214125442A472D4B6150645367566B59
      expiration: 86400000 # a day
      refresh-token:
        expiration: 604800000 # 7 days